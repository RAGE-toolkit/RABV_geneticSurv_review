am_hm
# Africa
colnames(africa_mat) <- names(africa_dat)
rownames(africa_mat) <- subset(dat, Region == "Africa")$Country
df <- melt(africa_mat)
colnames(df) <- c("x", "y", "value")
af_hm  <- ggplot(df, aes(x = y, y = x, fill = value)) +
geom_tile() +
xlab("") + ylab("") + ggtitle("Africa") +
scale_fill_continuous(breaks=seq(0,60, by=10),low='white',high=colsAf, name="Studies") +
theme(axis.text.x=element_text(angle=45,hjust=1))
af_hm
# Asia
colnames(asia_mat) <- names(asia_dat)
rownames(asia_mat) <- subset(dat, Region == "Asia")$Country
df <- melt(asia_mat)
colnames(df) <- c("x", "y", "value")
as_hm  <- ggplot(df, aes(x = y, y = x, fill = value)) +
geom_tile() +
xlab("") + ylab("") + ggtitle("Asia") +
scale_fill_continuous(breaks=seq(0,55, by=10),low='white',high=colsAs, name = "Studies") +
theme(axis.text.x=element_text(angle=45,hjust=1))
as_hm
#'---------------------------------------------------------
#'title: R Heat map
#'author: Gurdeep Jaswant
#'date: 20/08/2021
#'---------------------------------------------------------
rm(list=ls())
# Libraries
library(tidyverse)
library(reshape)
library(ggplot2)
library(RColorBrewer)
library(patchwork)
# library(hrbrthemes)
# library(plotly)
# #devtools::install_github("talgalili/d3heatmap")
# library(d3heatmap)
# library(heatmaply)
# Load data
# data <- read.csv("Data/globally_heatmap_fig3.csv")
dat <- read.csv("Data/heatmap_fig3.csv")
# Remove or rename some data/ country names
dat <- dat[-which(dat$Country == "West Indies"),]
dat$Country[which(dat$Country == "United Arab Emirates")] <- "UAE"
dat$Country[which(dat$Country == "United Republic of Tanzania")] <- "Tanzania"
dat$Country[which(dat$Country == "Democratic Republic of the Congo")] <- "DRC"
dat$Country[which(dat$Country == "Central African Republic")] <- "CAR"
# Matrix format
global_mat <- as.matrix(dat[,-c(1,2)])
rownames(global_mat) <- dat$Country
n = rowSums(global_mat)
N = colSums(global_mat)
# Set up the regional matrices
# Asia
asia_dat <- subset(dat, Region == "Asia")[,-c(1,2)]
N = colSums(asia_dat)
names(asia_dat) <- paste0(colnames(asia_dat), ", N=", N)
asia_mat <- as.matrix(asia_dat)
rownames(asia_mat) <- subset(dat, Region == "Asia")$Country
# Africa
africa_dat <- subset(dat, Region == "Africa")[,-c(1,2)]
N = colSums(africa_dat)
names(africa_dat) <- paste0(colnames(africa_dat), ", N=", N)
africa_mat <- as.matrix(africa_dat)
rownames(africa_mat) <- subset(dat, Region == "Africa")$Country
# Americas
americas_dat <- subset(dat, Region == "Americas")[,-c(1,2)]
N = colSums(americas_dat)
names(americas_dat) <- paste0(colnames(americas_dat), ", N=", N)
americas_mat <- as.matrix(americas_dat)
rownames(americas_mat) <- subset(dat, Region == "Americas")$Country
# Colours
colsAs = c(colorRampPalette(brewer.pal(6,"Greens"))(6))[6]
colsAf = c(colorRampPalette(brewer.pal(6,"Oranges"))(6))[6]
colsAm = c(colorRampPalette(brewer.pal(6,"Blues"))(6))[6]
# Transform the matrix in long format
# Americas
colnames(americas_mat) <- names(americas_dat)
rownames(americas_mat) <- subset(dat, Region == "Americas")$Country
df <- melt(americas_mat)
colnames(df) <- c("x", "y", "value")
am_hm  <- ggplot(df, aes(x = y, y = x, fill = value)) +
geom_tile() +
xlab("") + ylab("Country") + ggtitle("A. Americas") +
scale_fill_continuous(breaks=seq(0,60, by=10),low='white',high=colsAm, name="Studies") +
theme(axis.text.x=element_text(angle=45,hjust=1))
am_hm
# Africa
colnames(africa_mat) <- names(africa_dat)
rownames(africa_mat) <- subset(dat, Region == "Africa")$Country
df <- melt(africa_mat)
colnames(df) <- c("x", "y", "value")
af_hm  <- ggplot(df, aes(x = y, y = x, fill = value)) +
geom_tile() +
xlab("") + ylab("") + ggtitle("B. Africa") +
scale_fill_continuous(breaks=seq(0,60, by=10),low='white',high=colsAf, name="Studies") +
theme(axis.text.x=element_text(angle=45,hjust=1))
af_hm
# Asia
colnames(asia_mat) <- names(asia_dat)
rownames(asia_mat) <- subset(dat, Region == "Asia")$Country
df <- melt(asia_mat)
colnames(df) <- c("x", "y", "value")
as_hm  <- ggplot(df, aes(x = y, y = x, fill = value)) +
geom_tile() +
xlab("") + ylab("") + ggtitle("C. Asia") +
scale_fill_continuous(breaks=seq(0,55, by=10),low='white',high=colsAs, name = "Studies") +
theme(axis.text.x=element_text(angle=45,hjust=1))
as_hm
ggsave("Figures/fig3_heatmap.pdf",
plot = am_hm + af_hm + as_hm,
width = 11, height = 6, units="in")
setwd("/Users/gurde/Desktop/Git")
setwd("/Users/gurde/Desktop/Git/Phylogenetic_analysis _gj/Phylogenetic_analysis_gj/Initial_analysis/MADDOG_analysis/Stacked_bargraphs/grouping_quartery")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Convert 'quarter' to a factor to ensure it's treated as a categorical variable
df$quarter <- as.factor(df$quarter)
# Line plot for Kenya
kenya_data <- subset(df, country == "Kenya")
kenya_plot <- ggplot(kenya_data, aes(x = quarter, y = n, color = lineage)) +
geom_line() +
labs(title = "Lineage Changes Over Time in Kenya",
x = "Year (Quarter2)",
y = "Number of Lineages",
color = "Lineage") +
theme_minimal()
# Line plot for Tanzania
tanzania_data <- subset(df, country == "Tanzania")
tanzania_plot <- ggplot(tanzania_data, aes(x = quarter, y = n, color = lineage)) +
geom_line() +
labs(title = "Lineage Changes Over Time in Tanzania",
x = "Year (Quarter)",
y = "Number of Lineages",
color = "Lineage") +
theme_minimal()
# Display the plots
print(kenya_plot)
print(tanzania_plot)
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Convert 'quarter' to a factor to ensure it's treated as a categorical variable
df$quarter <- as.factor(df$quarter)
# Line plot for Kenya
kenya_data <- subset(df, country == "Kenya")
kenya_plot <- ggplot(kenya_data, aes(x = quarter, y = n, color = lineage)) +
geom_line() +
labs(title = "Lineage Changes Over Time in Kenya",
x = "Year (Quarter2)",
y = "Number of Lineages",
color = "Lineage") +
theme_minimal()
# Line plot for Tanzania
tanzania_data <- subset(df, country == "Tanzania")
tanzania_plot <- ggplot(tanzania_data, aes(x = quarter, y = n, color = lineage)) +
geom_line() +
labs(title = "Lineage Changes Over Time in Tanzania",
x = "Year (Quarter)",
y = "Number of Lineages",
color = "Lineage") +
theme_minimal()
# Display the plots
print(kenya_plot)
print(tanzania_plot)
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Convert 'quarter' to a factor to ensure it's treated as a categorical variable
df$quarter <- as.factor(df$quarter)
# Line plot for Kenya
# Line plot for Kenya
kenya_plot <- ggplot(kenya_data, aes(x = as.numeric(quarter), y = n, color = lineage, group = lineage)) +
geom_line() +
labs(title = "Lineage Changes Over Time in Kenya",
x = "Year (Quarter)",
y = "Number of Lineages",
color = "Lineage") +
theme_minimal()
# Line plot for Tanzania
tanzania_plot <- ggplot(tanzania_data, aes(x = as.numeric(quarter), y = n, color = lineage, group = lineage)) +
geom_line() +
labs(title = "Lineage Changes Over Time in Tanzania",
x = "Year (Quarter)",
y = "Number of Lineages",
color = "Lineage") +
theme_minimal()
# Display the plots
print(kenya_plot)
print(tanzania_plot)
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Grouped bar chart
grouped_bar <- ggplot(df, aes(x = quarter, y = n, fill = country)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ lineage, scales = "free_y") +
labs(title = "Lineage Changes Over Time by Country",
x = "Year (Quarter)",
y = "Number of Lineages",
fill = "Country") +
theme_minimal()
# Display the grouped bar chart
print(grouped_bar)
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Grouped bar chart
grouped_bar <- ggplot(df, aes(x = quarter2, y = n, fill = country)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ lineage, scales = "free_y") +
labs(title = "Lineage Changes Over Time by Country",
x = "Year (Quarter2)",
y = "Number of Lineages",
fill = "Country") +
theme_minimal()
# Display the grouped bar chart
print(grouped_bar)
library(ggplot2)
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Pivot the data to wide format for heatmap
df_wide <- reshape2::dcast(df, quarter2 + country ~ lineage, value.var = "n", fill = 0)
# Reorder quarters and convert to numeric for correct ordering in heatmap
df_wide$quarter <- factor(df_wide$quarter2, levels = unique(df_wide$quarter2))
# Heatmap for Kenya
kenya_data_wide <- subset(df_wide, country == "Kenya")
kenya_heatmap <- ggplot(kenya_data_wide, aes(x = quarter2, y = lineage, fill = n)) +
geom_tile() +
labs(title = "Lineage Changes Over Time in Kenya",
x = "Year (Quarter2)",
y = "Lineage",
fill = "Number of Lineages") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heatmap for Tanzania
tanzania_data_wide <- subset(df_wide, country == "Tanzania")
tanzania_heatmap <- ggplot(tanzania_data_wide, aes(x = quarter, y = lineage, fill = n)) +
geom_tile() +
labs(title = "Lineage Changes Over Time in Tanzania",
x = "Year (Quarter2)",
y = "Lineage",
fill = "Number of Lineages") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the heatmaps
print(kenya_heatmap)
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Assuming your dataset is stored in a data frame called df
# Reshape the data to long format
library(tidyr)
df_long <- pivot_longer(df, cols = starts_with("lineage"), names_to = "lineage", values_to = "n")
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Assuming your dataset is stored in a data frame called df
# Reshape the data to long format
library(tidyr)
df_long <- pivot_longer(df, cols = starts_with("lineage"), names_to = "lineage", values_to = "n", names_repair = "unique")
# Reorder quarters and convert to numeric for correct ordering in heatmap
df_long$quarter <- factor(df_long$quarter, levels = unique(df_long$quarter))
# Heatmap for Kenya
kenya_data_long <- subset(df_long, country == "Kenya")
kenya_heatmap <- ggplot(kenya_data_long, aes(x = quarter, y = lineage, fill = n)) +
geom_tile() +
labs(title = "Lineage Changes Over Time in Kenya",
x = "Year (Quarter)",
y = "Lineage",
fill = "Number of Lineages") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heatmap for Tanzania
tanzania_data_long <- subset(df_long, country == "Tanzania")
tanzania_heatmap <- ggplot(tanzania_data_long, aes(x = quarter, y = lineage, fill = n)) +
geom_tile() +
labs(title = "Lineage Changes Over Time in Tanzania",
x = "Year (Quarter)",
y = "Lineage",
fill = "Number of Lineages") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the heatmaps
print(kenya_heatmap)
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Assuming your dataset is stored in a data frame called df
# Reshape the data to long format
library(tidyr)
df_long <- pivot_longer(df, cols = starts_with("lineage"), names_to = "lineage", values_to = "n", names_repair = "unique")
# Reorder quarters and convert to numeric for correct ordering in heatmap
df_long$quarter <- factor(df_long$quarter, levels = unique(df_long$quarter))
# Heatmap for Kenya
kenya_data_long <- subset(df_long, country == "Kenya")
kenya_heatmap <- ggplot(kenya_data_long, aes(x = quarter, y = lineage, fill = as.factor(n))) +
geom_tile() +
labs(title = "Lineage Changes Over Time in Kenya",
x = "Year (Quarter)",
y = "Lineage",
fill = "Number of Lineages") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heatmap for Tanzania
tanzania_data_long <- subset(df_long, country == "Tanzania")
tanzania_heatmap <- ggplot(tanzania_data_long, aes(x = quarter, y = lineage, fill = as.factor(n))) +
geom_tile() +
labs(title = "Lineage Changes Over Time in Tanzania",
x = "Year (Quarter)",
y = "Lineage",
fill = "Number of Lineages") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the heatmaps
print(kenya_heatmap)
print(tanzania_heatmap)
library(ggplot2)
# Read the CSV file
df <- read.csv("lineages2_per_quarter.csv")
# Assuming your dataset is stored in a data frame called df
# Reshape the data to long format
library(tidyr)
df_long <- pivot_longer(df, cols = starts_with("lineage"), names_to = "lineage", values_to = "n", names_repair = "unique")
# Reorder quarters and convert to numeric for correct ordering in heatmap
df_long$quarter <- factor(df_long$quarter, levels = unique(df_long$quarter))
# Heatmap for Kenya
kenya_data_long <- subset(df_long, country == "Kenya")
kenya_heatmap <- ggplot(kenya_data_long, aes(x = quarter, y = lineage, fill = n)) +
geom_tile() +
labs(title = "Lineage Changes Over Time in Kenya",
x = "Year (Quarter)",
y = "Lineage",
fill = "Number of Lineages") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heatmap for Tanzania
tanzania_data_long <- subset(df_long, country == "Tanzania")
tanzania_heatmap <- ggplot(tanzania_data_long, aes(x = quarter, y = lineage, fill = n)) +
geom_tile() +
labs(title = "Lineage Changes Over Time in Tanzania",
x = "Year (Quarter)",
y = "Lineage",
fill = "Number of Lineages") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the heatmaps
print(kenya_heatmap)
print(tanzania_heatmap)
setwd("/Users/gurde/Desktop/Git/Phylogenetic_analysis _gj/Phylogenetic_analysis_gj/Partition_finder_analysis/EA_gruns_only/AF1b_gruns")
rm(list=ls())
#extract partitions for beast
library(seqinr)
#BiocManager::install("ORFik")
#BiocManager::install("DECIPHER")
library(ORFik)
library(DECIPHER)
library(devtools)
#install_github("thibautjombart/apex")
#install.packages("apex")
library(apex)
library(stringr)
library(Biostrings)
library(sjPlot)
library(ggplot2)
library(sf)
library(reshape)
library(ggspatial)
library(viridis)
library(dplyr)
#input file (ESSEL- change to your WGS alignment file)
file= "AF1b_gruns_align.fasta"
#output files
dir.create(file.path(paste(dirname(file), "output", sep="/")), showWarnings = FALSE)
# set output file location (same as input) and prefix
newfiles=paste(dirname(file), "output", gsub(".fasta|.fst","",basename(file)), sep="/")
#----------
# alignment import and curation
# read in sequences as string set for ORF function
string=readDNAStringSet(file)
#remove any alignment errors (sometimes present if alignment has been subset). Write and replace file
#also removes artifact: “new” added to sequence names sometimes
#not always necessary but does no harm
string=RemoveGaps(string, removeGaps = "common")
names(string) <- gsub("New|","",labels(string),fixed=T)
names(string) <- vapply(strsplit(labels(string),".",fixed=T), `[`, 1, FUN.VALUE=character(1)) #extract sampleID from seq name
#uncomment to write sequence files
writeXStringSet(string, paste0(newfiles, ".fasta"), format="fasta")
#----------#----------
# Partition into gene subsets
# find most complete genome and search for ORFs
chosen=which.max(str_count(as.character(string), "A|T|G|C"))
#chosen.seq=RemoveGaps(string[chosen], removeGaps = "common")
genes=as.data.frame(findORFs(string[chosen], startCodon = "ATG", minimumLength =200))
# it can’t find the correct M gene start point so have to pull out manually
genes=genes[order(genes$start),]
genes=genes[-3,]
find.m=as.data.frame(findORFs(string[chosen], startCodon = "ATG", minimumLength =200, longestORF = F))
find.m=find.m[order(find.m$start),]
m=find.m[which(find.m$start>2400 & find.m$width==609),]
#join with other genes
genes=rbind(genes, m)
genes=genes[order(genes$start),]
genes=genes[,-c(1,2)]
genes$gene=NA
genes$gene=c("n","p","m","g","l")
seq=read.fasta(paste0(newfiles, ".fasta"))
# split into coding partitions (5 genes)
# based on ORF positions
n=getFrag(seq, begin=genes$start[1],end=genes$end[1])
p=getFrag(seq, begin=genes$start[2],end=genes$end[2])
m=getFrag(seq, begin=genes$start[3],end=genes$end[3])
g=getFrag(seq, begin=genes$start[4],end=genes$end[4])
l=getFrag(seq, begin=genes$start[5],end=genes$end[5])
write.fasta(n, file=paste0(newfiles, "_N_subset.fasta"),names=names(seq))
write.fasta(p, file=paste0(newfiles, "_P_subset.fasta"),names=names(seq))
write.fasta(m, file=paste0(newfiles, "_M_subset.fasta"),names=names(seq))
write.fasta(g, file=paste0(newfiles, "_G_subset.fasta"),names=names(seq))
write.fasta(l, file=paste0(newfiles, "_L_subset.fasta"),names=names(seq))
View(genes)
setwd("/Users/gurde/Desktop/Git/Phylogenetic_analysis _gj/Phylogenetic_analysis_gj/Partition_finder_analysis/EA_general/AF1b_general")
#input file (ESSEL- change to your WGS alignment file)
file= "AF1b_general_align.fasta"
#output files
dir.create(file.path(paste(dirname(file), "output", sep="/")), showWarnings = FALSE)
# set output file location (same as input) and prefix
newfiles=paste(dirname(file), "output", gsub(".fasta|.fst","",basename(file)), sep="/")
#----------
# alignment import and curation
# read in sequences as string set for ORF function
string=readDNAStringSet(file)
#remove any alignment errors (sometimes present if alignment has been subset). Write and replace file
#also removes artifact: “new” added to sequence names sometimes
#not always necessary but does no harm
string=RemoveGaps(string, removeGaps = "common")
names(string) <- gsub("New|","",labels(string),fixed=T)
names(string) <- vapply(strsplit(labels(string),".",fixed=T), `[`, 1, FUN.VALUE=character(1)) #extract sampleID from seq name
#uncomment to write sequence files
writeXStringSet(string, paste0(newfiles, ".fasta"), format="fasta")
#----------#----------
# Partition into gene subsets
# find most complete genome and search for ORFs
chosen=which.max(str_count(as.character(string), "A|T|G|C"))
#chosen.seq=RemoveGaps(string[chosen], removeGaps = "common")
genes=as.data.frame(findORFs(string[chosen], startCodon = "ATG", minimumLength =200))
# it can’t find the correct M gene start point so have to pull out manually
genes=genes[order(genes$start),]
rm(list=ls())
#input file (ESSEL- change to your WGS alignment file)
file= "AF1b_general_align.fasta"
#output files
dir.create(file.path(paste(dirname(file), "output", sep="/")), showWarnings = FALSE)
# set output file location (same as input) and prefix
newfiles=paste(dirname(file), "output", gsub(".fasta|.fst","",basename(file)), sep="/")
#----------
# alignment import and curation
# read in sequences as string set for ORF function
string=readDNAStringSet(file)
#remove any alignment errors (sometimes present if alignment has been subset). Write and replace file
#also removes artifact: “new” added to sequence names sometimes
#not always necessary but does no harm
string=RemoveGaps(string, removeGaps = "common")
names(string) <- gsub("New|","",labels(string),fixed=T)
names(string) <- vapply(strsplit(labels(string),".",fixed=T), `[`, 1, FUN.VALUE=character(1)) #extract sampleID from seq name
#uncomment to write sequence files
writeXStringSet(string, paste0(newfiles, ".fasta"), format="fasta")
#----------#----------
# Partition into gene subsets
# find most complete genome and search for ORFs
chosen=which.max(str_count(as.character(string), "A|T|G|C"))
#chosen.seq=RemoveGaps(string[chosen], removeGaps = "common")
genes=as.data.frame(findORFs(string[chosen], startCodon = "ATG", minimumLength =200))
# it can’t find the correct M gene start point so have to pull out manually
genes=genes[order(genes$start),]
genes=genes[-3,]
find.m=as.data.frame(findORFs(string[chosen], startCodon = "ATG", minimumLength =200, longestORF = F))
find.m=find.m[order(find.m$start),]
m=find.m[which(find.m$start>2400 & find.m$width==609),]
#join with other genes
genes=rbind(genes, m)
genes=genes[order(genes$start),]
genes=genes[,-c(1,2)]
genes$gene=NA
genes$gene=c("n","p","m","g","l")
seq=read.fasta(paste0(newfiles, ".fasta"))
# split into coding partitions (5 genes)
# based on ORF positions
n=getFrag(seq, begin=genes$start[1],end=genes$end[1])
p=getFrag(seq, begin=genes$start[2],end=genes$end[2])
m=getFrag(seq, begin=genes$start[3],end=genes$end[3])
g=getFrag(seq, begin=genes$start[4],end=genes$end[4])
l=getFrag(seq, begin=genes$start[5],end=genes$end[5])
write.fasta(n, file=paste0(newfiles, "_N_subset.fasta"),names=names(seq))
write.fasta(p, file=paste0(newfiles, "_P_subset.fasta"),names=names(seq))
write.fasta(m, file=paste0(newfiles, "_M_subset.fasta"),names=names(seq))
write.fasta(g, file=paste0(newfiles, "_G_subset.fasta"),names=names(seq))
write.fasta(l, file=paste0(newfiles, "_L_subset.fasta"),names=names(seq))
View(genes)
View(genes)
